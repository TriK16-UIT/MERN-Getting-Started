{"ast":null,"code":"import { eachDayOfInterval } from \"./eachDayOfInterval.mjs\";\nimport { isWeekend } from \"./isWeekend.mjs\";\n\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\nexport function eachWeekendOfInterval(interval) {\n  const dateInterval = eachDayOfInterval(interval);\n  const weekends = [];\n  let index = 0;\n  while (index < dateInterval.length) {\n    const date = dateInterval[index++];\n    if (isWeekend(date)) weekends.push(date);\n  }\n  return weekends;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekendOfInterval;","map":{"version":3,"names":["eachDayOfInterval","isWeekend","eachWeekendOfInterval","interval","dateInterval","weekends","index","length","date","push"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/eachWeekendOfInterval.mjs"],"sourcesContent":["import { eachDayOfInterval } from \"./eachDayOfInterval.mjs\";\r\nimport { isWeekend } from \"./isWeekend.mjs\";\r\n\r\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The given interval\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekendOfInterval(interval) {\r\n  const dateInterval = eachDayOfInterval(interval);\r\n  const weekends = [];\r\n  let index = 0;\r\n  while (index < dateInterval.length) {\r\n    const date = dateInterval[index++];\r\n    if (isWeekend(date)) weekends.push(date);\r\n  }\r\n  return weekends;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfInterval;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,QAAQ,EAAE;EAC9C,MAAMC,YAAY,GAAGJ,iBAAiB,CAACG,QAAQ,CAAC;EAChD,MAAME,QAAQ,GAAG,EAAE;EACnB,IAAIC,KAAK,GAAG,CAAC;EACb,OAAOA,KAAK,GAAGF,YAAY,CAACG,MAAM,EAAE;IAClC,MAAMC,IAAI,GAAGJ,YAAY,CAACE,KAAK,EAAE,CAAC;IAClC,IAAIL,SAAS,CAACO,IAAI,CAAC,EAAEH,QAAQ,CAACI,IAAI,CAACD,IAAI,CAAC;EAC1C;EACA,OAAOH,QAAQ;AACjB;;AAEA;AACA,eAAeH,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}