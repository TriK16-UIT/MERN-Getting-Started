{"ast":null,"code":"import { addWeeks } from \"./addWeeks.mjs\";\nimport { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\n\n/**\r\n * @name getISOWeeksInYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The number of ISO weeks in a year\r\n *\r\n * @example\r\n * // How many weeks are in ISO week-numbering year 2015?\r\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\r\n * //=> 53\r\n */\nexport function getISOWeeksInYear(date) {\n  const thisYear = startOfISOWeekYear(date);\n  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  const diff = +nextYear - +thisYear;\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default getISOWeeksInYear;","map":{"version":3,"names":["addWeeks","millisecondsInWeek","startOfISOWeekYear","getISOWeeksInYear","date","thisYear","nextYear","diff","Math","round"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/getISOWeeksInYear.mjs"],"sourcesContent":["import { addWeeks } from \"./addWeeks.mjs\";\r\nimport { millisecondsInWeek } from \"./constants.mjs\";\r\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\r\n\r\n/**\r\n * @name getISOWeeksInYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The number of ISO weeks in a year\r\n *\r\n * @example\r\n * // How many weeks are in ISO week-numbering year 2015?\r\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\r\n * //=> 53\r\n */\r\nexport function getISOWeeksInYear(date) {\r\n  const thisYear = startOfISOWeekYear(date);\r\n  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\r\n  const diff = +nextYear - +thisYear;\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / millisecondsInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getISOWeeksInYear;\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,kBAAkB,QAAQ,0BAA0B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EACtC,MAAMC,QAAQ,GAAGH,kBAAkB,CAACE,IAAI,CAAC;EACzC,MAAME,QAAQ,GAAGJ,kBAAkB,CAACF,QAAQ,CAACK,QAAQ,EAAE,EAAE,CAAC,CAAC;EAC3D,MAAME,IAAI,GAAG,CAACD,QAAQ,GAAG,CAACD,QAAQ;;EAElC;EACA;EACA;EACA,OAAOG,IAAI,CAACC,KAAK,CAACF,IAAI,GAAGN,kBAAkB,CAAC;AAC9C;;AAEA;AACA,eAAeE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}