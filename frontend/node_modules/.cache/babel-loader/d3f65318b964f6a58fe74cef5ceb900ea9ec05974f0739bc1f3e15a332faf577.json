{"ast":null,"code":"import { getWeekYear } from \"../../../getWeekYear.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"YY\"\n    });\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n  incompatibleTokens = [\"y\", \"R\", \"u\", \"Q\", \"q\", \"M\", \"L\", \"I\", \"d\", \"D\", \"i\", \"t\", \"T\"];\n}","map":{"version":3,"names":["getWeekYear","startOfWeek","Parser","mapValue","normalizeTwoDigitYear","parseNDigits","LocalWeekYearParser","priority","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","length","validate","_date","value","set","date","flags","options","currentYear","normalizedTwoDigitYear","setFullYear","firstWeekContainsDate","setHours","era","incompatibleTokens"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs"],"sourcesContent":["import { getWeekYear } from \"../../../getWeekYear.mjs\";\r\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\r\nimport { Parser } from \"../Parser.mjs\";\r\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\r\n\r\n// Local week-numbering year\r\nexport class LocalWeekYearParser extends Parser {\r\n  priority = 130;\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (year) => ({\r\n      year,\r\n      isTwoDigitYear: token === \"YY\",\r\n    });\r\n\r\n    switch (token) {\r\n      case \"Y\":\r\n        return mapValue(parseNDigits(4, dateString), valueCallback);\r\n      case \"Yo\":\r\n        return mapValue(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"year\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      default:\r\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value.isTwoDigitYear || value.year > 0;\r\n  }\r\n\r\n  set(date, flags, value, options) {\r\n    const currentYear = getWeekYear(date, options);\r\n\r\n    if (value.isTwoDigitYear) {\r\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\r\n        value.year,\r\n        currentYear,\r\n      );\r\n      date.setFullYear(\r\n        normalizedTwoDigitYear,\r\n        0,\r\n        options.firstWeekContainsDate,\r\n      );\r\n      date.setHours(0, 0, 0, 0);\r\n      return startOfWeek(date, options);\r\n    }\r\n\r\n    const year =\r\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\r\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\r\n    date.setHours(0, 0, 0, 0);\r\n    return startOfWeek(date, options);\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"y\",\r\n    \"R\",\r\n    \"u\",\r\n    \"Q\",\r\n    \"q\",\r\n    \"M\",\r\n    \"L\",\r\n    \"I\",\r\n    \"d\",\r\n    \"D\",\r\n    \"i\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,QAAQ,EAAEC,qBAAqB,EAAEC,YAAY,QAAQ,cAAc;;AAE5E;AACA,OAAO,MAAMC,mBAAmB,SAASJ,MAAM,CAAC;EAC9CK,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,IAAI,KAAM;MAC/BA,IAAI;MACJC,cAAc,EAAEJ,KAAK,KAAK;IAC5B,CAAC,CAAC;IAEF,QAAQA,KAAK;MACX,KAAK,GAAG;QACN,OAAOP,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAEI,UAAU,CAAC,EAAEG,aAAa,CAAC;MAC7D,KAAK,IAAI;QACP,OAAOT,QAAQ,CACbQ,KAAK,CAACI,aAAa,CAACN,UAAU,EAAE;UAC9BO,IAAI,EAAE;QACR,CAAC,CAAC,EACFJ,aACF,CAAC;MACH;QACE,OAAOT,QAAQ,CAACE,YAAY,CAACK,KAAK,CAACO,MAAM,EAAER,UAAU,CAAC,EAAEG,aAAa,CAAC;IAC1E;EACF;EAEAM,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,CAACN,cAAc,IAAIM,KAAK,CAACP,IAAI,GAAG,CAAC;EAC/C;EAEAQ,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEH,KAAK,EAAEI,OAAO,EAAE;IAC/B,MAAMC,WAAW,GAAGzB,WAAW,CAACsB,IAAI,EAAEE,OAAO,CAAC;IAE9C,IAAIJ,KAAK,CAACN,cAAc,EAAE;MACxB,MAAMY,sBAAsB,GAAGtB,qBAAqB,CAClDgB,KAAK,CAACP,IAAI,EACVY,WACF,CAAC;MACDH,IAAI,CAACK,WAAW,CACdD,sBAAsB,EACtB,CAAC,EACDF,OAAO,CAACI,qBACV,CAAC;MACDN,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB,OAAO5B,WAAW,CAACqB,IAAI,EAAEE,OAAO,CAAC;IACnC;IAEA,MAAMX,IAAI,GACR,EAAE,KAAK,IAAIU,KAAK,CAAC,IAAIA,KAAK,CAACO,GAAG,KAAK,CAAC,GAAGV,KAAK,CAACP,IAAI,GAAG,CAAC,GAAGO,KAAK,CAACP,IAAI;IACpES,IAAI,CAACK,WAAW,CAACd,IAAI,EAAE,CAAC,EAAEW,OAAO,CAACI,qBAAqB,CAAC;IACxDN,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAO5B,WAAW,CAACqB,IAAI,EAAEE,OAAO,CAAC;EACnC;EAEAO,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}