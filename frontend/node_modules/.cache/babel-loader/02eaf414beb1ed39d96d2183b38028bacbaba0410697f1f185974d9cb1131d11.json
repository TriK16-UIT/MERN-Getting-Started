{"ast":null,"code":"import { startOfMinute } from \"./startOfMinute.mjs\";\n\n/**\r\n * @name isSameMinute\r\n * @category Minute Helpers\r\n * @summary Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same minute (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 4, 6, 30, 15)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 5, 6, 30)\r\n * )\r\n * //=> false\r\n */\nexport function isSameMinute(dateLeft, dateRight) {\n  const dateLeftStartOfMinute = startOfMinute(dateLeft);\n  const dateRightStartOfMinute = startOfMinute(dateRight);\n  return +dateLeftStartOfMinute === +dateRightStartOfMinute;\n}\n\n// Fallback for modularized imports:\nexport default isSameMinute;","map":{"version":3,"names":["startOfMinute","isSameMinute","dateLeft","dateRight","dateLeftStartOfMinute","dateRightStartOfMinute"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/isSameMinute.mjs"],"sourcesContent":["import { startOfMinute } from \"./startOfMinute.mjs\";\r\n\r\n/**\r\n * @name isSameMinute\r\n * @category Minute Helpers\r\n * @summary Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same minute (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 4, 6, 30, 15)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 5, 6, 30)\r\n * )\r\n * //=> false\r\n */\r\nexport function isSameMinute(dateLeft, dateRight) {\r\n  const dateLeftStartOfMinute = startOfMinute(dateLeft);\r\n  const dateRightStartOfMinute = startOfMinute(dateRight);\r\n\r\n  return +dateLeftStartOfMinute === +dateRightStartOfMinute;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameMinute;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAChD,MAAMC,qBAAqB,GAAGJ,aAAa,CAACE,QAAQ,CAAC;EACrD,MAAMG,sBAAsB,GAAGL,aAAa,CAACG,SAAS,CAAC;EAEvD,OAAO,CAACC,qBAAqB,KAAK,CAACC,sBAAsB;AAC3D;;AAEA;AACA,eAAeJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}