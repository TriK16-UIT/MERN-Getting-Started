{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\r\n * The {@link getWeekYear} function options.\r\n */\n\n/**\r\n * @name getWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Get the local week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the local week-numbering year of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The local week-numbering year\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 with the default settings?\r\n * const result = getWeekYear(new Date(2004, 11, 26))\r\n * //=> 2005\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\r\n * //=> 2004\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\r\n * //=> 2004\r\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;","map":{"version":3,"names":["constructFrom","startOfWeek","toDate","getDefaultOptions","getWeekYear","date","options","_date","year","getFullYear","defaultOptions","firstWeekContainsDate","locale","firstWeekOfNextYear","setFullYear","setHours","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/getWeekYear.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link getWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name getWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Get the local week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the local week-numbering year of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The local week-numbering year\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 with the default settings?\r\n * const result = getWeekYear(new Date(2004, 11, 26))\r\n * //=> 2005\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\r\n * //=> 2004\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\r\n * //=> 2004\r\n */\r\nexport function getWeekYear(date, options) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const defaultOptions = getDefaultOptions();\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const firstWeekOfNextYear = constructFrom(date, 0);\r\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\r\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\r\n\r\n  const firstWeekOfThisYear = constructFrom(date, 0);\r\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\r\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeekYear;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,iBAAiB,QAAQ,2BAA2B;;AAE7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACzC,MAAMC,KAAK,GAAGL,MAAM,CAACG,IAAI,CAAC;EAC1B,MAAMG,IAAI,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;EAEhC,MAAMC,cAAc,GAAGP,iBAAiB,CAAC,CAAC;EAC1C,MAAMQ,qBAAqB,GACzBL,OAAO,EAAEK,qBAAqB,IAC9BL,OAAO,EAAEM,MAAM,EAAEN,OAAO,EAAEK,qBAAqB,IAC/CD,cAAc,CAACC,qBAAqB,IACpCD,cAAc,CAACE,MAAM,EAAEN,OAAO,EAAEK,qBAAqB,IACrD,CAAC;EAEH,MAAME,mBAAmB,GAAGb,aAAa,CAACK,IAAI,EAAE,CAAC,CAAC;EAClDQ,mBAAmB,CAACC,WAAW,CAACN,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEG,qBAAqB,CAAC;EACnEE,mBAAmB,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMC,eAAe,GAAGf,WAAW,CAACY,mBAAmB,EAAEP,OAAO,CAAC;EAEjE,MAAMW,mBAAmB,GAAGjB,aAAa,CAACK,IAAI,EAAE,CAAC,CAAC;EAClDY,mBAAmB,CAACH,WAAW,CAACN,IAAI,EAAE,CAAC,EAAEG,qBAAqB,CAAC;EAC/DM,mBAAmB,CAACF,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMG,eAAe,GAAGjB,WAAW,CAACgB,mBAAmB,EAAEX,OAAO,CAAC;EAEjE,IAAIC,KAAK,CAACY,OAAO,CAAC,CAAC,IAAIH,eAAe,CAACG,OAAO,CAAC,CAAC,EAAE;IAChD,OAAOX,IAAI,GAAG,CAAC;EACjB,CAAC,MAAM,IAAID,KAAK,CAACY,OAAO,CAAC,CAAC,IAAID,eAAe,CAACC,OAAO,CAAC,CAAC,EAAE;IACvD,OAAOX,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,GAAG,CAAC;EACjB;AACF;;AAEA;AACA,eAAeJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}