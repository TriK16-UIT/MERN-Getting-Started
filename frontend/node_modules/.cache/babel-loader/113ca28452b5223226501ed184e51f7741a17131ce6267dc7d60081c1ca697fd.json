{"ast":null,"code":"import { addDays } from \"./addDays.mjs\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { isWeekend } from \"./isWeekend.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name differenceInBusinessDays\r\n * @category Day Helpers\r\n * @summary Get the number of business days between the given dates.\r\n *\r\n * @description\r\n * Get the number of business day periods between the given dates.\r\n * Business days being days that arent in the weekend.\r\n * Like `differenceInCalendarDays`, the function removes the times from\r\n * the dates before calculating the difference.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of business days\r\n *\r\n * @example\r\n * // How many business days are between\r\n * // 10 January 2014 and 20 July 2014?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 0, 10)\r\n * )\r\n * //=> 136\r\n *\r\n * // How many business days are between\r\n * // 30 November 2021 and 1 November 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 30),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 21\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 December 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 11, 1)\r\n * )\r\n * //=> -22\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 November 2021 ?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 0\r\n */\nexport function differenceInBusinessDays(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  let _dateRight = toDate(dateRight);\n  if (!isValid(_dateLeft) || !isValid(_dateRight)) return NaN;\n  const calendarDifference = differenceInCalendarDays(_dateLeft, _dateRight);\n  const sign = calendarDifference < 0 ? -1 : 1;\n  const weeks = Math.trunc(calendarDifference / 7);\n  let result = weeks * 5;\n  _dateRight = addDays(_dateRight, weeks * 7);\n\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n  while (!isSameDay(_dateLeft, _dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(_dateRight) ? 0 : sign;\n    _dateRight = addDays(_dateRight, sign);\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInBusinessDays;","map":{"version":3,"names":["addDays","differenceInCalendarDays","isSameDay","isValid","isWeekend","toDate","differenceInBusinessDays","dateLeft","dateRight","_dateLeft","_dateRight","NaN","calendarDifference","sign","weeks","Math","trunc","result"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/differenceInBusinessDays.mjs"],"sourcesContent":["import { addDays } from \"./addDays.mjs\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\r\nimport { isSameDay } from \"./isSameDay.mjs\";\r\nimport { isValid } from \"./isValid.mjs\";\r\nimport { isWeekend } from \"./isWeekend.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name differenceInBusinessDays\r\n * @category Day Helpers\r\n * @summary Get the number of business days between the given dates.\r\n *\r\n * @description\r\n * Get the number of business day periods between the given dates.\r\n * Business days being days that arent in the weekend.\r\n * Like `differenceInCalendarDays`, the function removes the times from\r\n * the dates before calculating the difference.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of business days\r\n *\r\n * @example\r\n * // How many business days are between\r\n * // 10 January 2014 and 20 July 2014?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 0, 10)\r\n * )\r\n * //=> 136\r\n *\r\n * // How many business days are between\r\n * // 30 November 2021 and 1 November 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 30),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 21\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 December 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 11, 1)\r\n * )\r\n * //=> -22\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 November 2021 ?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 0\r\n */\r\nexport function differenceInBusinessDays(dateLeft, dateRight) {\r\n  const _dateLeft = toDate(dateLeft);\r\n  let _dateRight = toDate(dateRight);\r\n\r\n  if (!isValid(_dateLeft) || !isValid(_dateRight)) return NaN;\r\n\r\n  const calendarDifference = differenceInCalendarDays(_dateLeft, _dateRight);\r\n  const sign = calendarDifference < 0 ? -1 : 1;\r\n\r\n  const weeks = Math.trunc(calendarDifference / 7);\r\n\r\n  let result = weeks * 5;\r\n  _dateRight = addDays(_dateRight, weeks * 7);\r\n\r\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\r\n  while (!isSameDay(_dateLeft, _dateRight)) {\r\n    // sign is used to account for both negative and positive differences\r\n    result += isWeekend(_dateRight) ? 0 : sign;\r\n    _dateRight = addDays(_dateRight, sign);\r\n  }\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInBusinessDays;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,wBAAwB,QAAQ,gCAAgC;AACzE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAC5D,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAAC;EAClC,IAAIG,UAAU,GAAGL,MAAM,CAACG,SAAS,CAAC;EAElC,IAAI,CAACL,OAAO,CAACM,SAAS,CAAC,IAAI,CAACN,OAAO,CAACO,UAAU,CAAC,EAAE,OAAOC,GAAG;EAE3D,MAAMC,kBAAkB,GAAGX,wBAAwB,CAACQ,SAAS,EAAEC,UAAU,CAAC;EAC1E,MAAMG,IAAI,GAAGD,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAE5C,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,kBAAkB,GAAG,CAAC,CAAC;EAEhD,IAAIK,MAAM,GAAGH,KAAK,GAAG,CAAC;EACtBJ,UAAU,GAAGV,OAAO,CAACU,UAAU,EAAEI,KAAK,GAAG,CAAC,CAAC;;EAE3C;EACA,OAAO,CAACZ,SAAS,CAACO,SAAS,EAAEC,UAAU,CAAC,EAAE;IACxC;IACAO,MAAM,IAAIb,SAAS,CAACM,UAAU,CAAC,GAAG,CAAC,GAAGG,IAAI;IAC1CH,UAAU,GAAGV,OAAO,CAACU,UAAU,EAAEG,IAAI,CAAC;EACxC;;EAEA;EACA,OAAOI,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC;;AAEA;AACA,eAAeX,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}