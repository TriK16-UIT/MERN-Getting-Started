{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name min\r\n * @category Common Helpers\r\n * @summary Returns the earliest of the given dates.\r\n *\r\n * @description\r\n * Returns the earliest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The earliest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the earliest?\r\n * const result = min([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Wed Feb 11 1987 00:00:00\r\n */\nexport function min(dates) {\n  let result;\n  dates.forEach(dirtyDate => {\n    const date = toDate(dirtyDate);\n    if (!result || result > date || isNaN(+date)) {\n      result = date;\n    }\n  });\n  return result || new Date(NaN);\n}\n\n// Fallback for modularized imports:\nexport default min;","map":{"version":3,"names":["toDate","min","dates","result","forEach","dirtyDate","date","isNaN","Date","NaN"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/min.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name min\r\n * @category Common Helpers\r\n * @summary Returns the earliest of the given dates.\r\n *\r\n * @description\r\n * Returns the earliest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The earliest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the earliest?\r\n * const result = min([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Wed Feb 11 1987 00:00:00\r\n */\r\nexport function min(dates) {\r\n  let result;\r\n\r\n  dates.forEach((dirtyDate) => {\r\n    const date = toDate(dirtyDate);\r\n    if (!result || result > date || isNaN(+date)) {\r\n      result = date;\r\n    }\r\n  });\r\n\r\n  return result || new Date(NaN);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default min;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,KAAK,EAAE;EACzB,IAAIC,MAAM;EAEVD,KAAK,CAACE,OAAO,CAAEC,SAAS,IAAK;IAC3B,MAAMC,IAAI,GAAGN,MAAM,CAACK,SAAS,CAAC;IAC9B,IAAI,CAACF,MAAM,IAAIA,MAAM,GAAGG,IAAI,IAAIC,KAAK,CAAC,CAACD,IAAI,CAAC,EAAE;MAC5CH,MAAM,GAAGG,IAAI;IACf;EACF,CAAC,CAAC;EAEF,OAAOH,MAAM,IAAI,IAAIK,IAAI,CAACC,GAAG,CAAC;AAChC;;AAEA;AACA,eAAeR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}