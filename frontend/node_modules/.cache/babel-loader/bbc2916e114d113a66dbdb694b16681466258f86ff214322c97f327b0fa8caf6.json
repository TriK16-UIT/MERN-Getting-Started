{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name isPast\r\n * @category Common Helpers\r\n * @summary Is the given date in the past?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the past?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in the past\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 2 July 2014 in the past?\r\n * const result = isPast(new Date(2014, 6, 2))\r\n * //=> true\r\n */\nexport function isPast(date) {\n  return +toDate(date) < Date.now();\n}\n\n// Fallback for modularized imports:\nexport default isPast;","map":{"version":3,"names":["toDate","isPast","date","Date","now"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/isPast.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name isPast\r\n * @category Common Helpers\r\n * @summary Is the given date in the past?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the past?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in the past\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 2 July 2014 in the past?\r\n * const result = isPast(new Date(2014, 6, 2))\r\n * //=> true\r\n */\r\nexport function isPast(date) {\r\n  return +toDate(date) < Date.now();\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isPast;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,IAAI,EAAE;EAC3B,OAAO,CAACF,MAAM,CAACE,IAAI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;AACnC;;AAEA;AACA,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}