{"ast":null,"code":"import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name differenceInMonths\r\n * @category Month Helpers\r\n * @summary Get the number of full months between the given dates.\r\n *\r\n * @description\r\n * Get the number of full months between the given dates using trunc as a default rounding method.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full months\r\n *\r\n * @example\r\n * // How many full months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\r\n * //=> 7\r\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(differenceInCalendarMonths(_dateLeft, _dateRight));\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (isLastDayOfMonth(toDate(dateLeft)) && difference === 1 && compareAsc(dateLeft, _dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;","map":{"version":3,"names":["compareAsc","differenceInCalendarMonths","isLastDayOfMonth","toDate","differenceInMonths","dateLeft","dateRight","_dateLeft","_dateRight","sign","difference","Math","abs","result","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","Number"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/differenceInMonths.mjs"],"sourcesContent":["import { compareAsc } from \"./compareAsc.mjs\";\r\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\r\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name differenceInMonths\r\n * @category Month Helpers\r\n * @summary Get the number of full months between the given dates.\r\n *\r\n * @description\r\n * Get the number of full months between the given dates using trunc as a default rounding method.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full months\r\n *\r\n * @example\r\n * // How many full months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\r\n * //=> 7\r\n */\r\nexport function differenceInMonths(dateLeft, dateRight) {\r\n  const _dateLeft = toDate(dateLeft);\r\n  const _dateRight = toDate(dateRight);\r\n\r\n  const sign = compareAsc(_dateLeft, _dateRight);\r\n  const difference = Math.abs(\r\n    differenceInCalendarMonths(_dateLeft, _dateRight),\r\n  );\r\n  let result;\r\n\r\n  // Check for the difference of less than month\r\n  if (difference < 1) {\r\n    result = 0;\r\n  } else {\r\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\r\n      // This will check if the date is end of Feb and assign a higher end of month date\r\n      // to compare it with Jan\r\n      _dateLeft.setDate(30);\r\n    }\r\n\r\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\r\n\r\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\r\n    // If so, result must be decreased by 1 in absolute value\r\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\r\n\r\n    // Check for cases of one full calendar month\r\n    if (\r\n      isLastDayOfMonth(toDate(dateLeft)) &&\r\n      difference === 1 &&\r\n      compareAsc(dateLeft, _dateRight) === 1\r\n    ) {\r\n      isLastMonthNotFull = false;\r\n    }\r\n\r\n    result = sign * (difference - Number(isLastMonthNotFull));\r\n  }\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInMonths;\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,0BAA0B,QAAQ,kCAAkC;AAC7E,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EACtD,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAAC;EAClC,MAAMG,UAAU,GAAGL,MAAM,CAACG,SAAS,CAAC;EAEpC,MAAMG,IAAI,GAAGT,UAAU,CAACO,SAAS,EAAEC,UAAU,CAAC;EAC9C,MAAME,UAAU,GAAGC,IAAI,CAACC,GAAG,CACzBX,0BAA0B,CAACM,SAAS,EAAEC,UAAU,CAClD,CAAC;EACD,IAAIK,MAAM;;EAEV;EACA,IAAIH,UAAU,GAAG,CAAC,EAAE;IAClBG,MAAM,GAAG,CAAC;EACZ,CAAC,MAAM;IACL,IAAIN,SAAS,CAACO,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAIP,SAAS,CAACQ,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;MAC1D;MACA;MACAR,SAAS,CAACS,OAAO,CAAC,EAAE,CAAC;IACvB;IAEAT,SAAS,CAACU,QAAQ,CAACV,SAAS,CAACO,QAAQ,CAAC,CAAC,GAAGL,IAAI,GAAGC,UAAU,CAAC;;IAE5D;IACA;IACA,IAAIQ,kBAAkB,GAAGlB,UAAU,CAACO,SAAS,EAAEC,UAAU,CAAC,KAAK,CAACC,IAAI;;IAEpE;IACA,IACEP,gBAAgB,CAACC,MAAM,CAACE,QAAQ,CAAC,CAAC,IAClCK,UAAU,KAAK,CAAC,IAChBV,UAAU,CAACK,QAAQ,EAAEG,UAAU,CAAC,KAAK,CAAC,EACtC;MACAU,kBAAkB,GAAG,KAAK;IAC5B;IAEAL,MAAM,GAAGJ,IAAI,IAAIC,UAAU,GAAGS,MAAM,CAACD,kBAAkB,CAAC,CAAC;EAC3D;;EAEA;EACA,OAAOL,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM;AAClC;;AAEA;AACA,eAAeT,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}