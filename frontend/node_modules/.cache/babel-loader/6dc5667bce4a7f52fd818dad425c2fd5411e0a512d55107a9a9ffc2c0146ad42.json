{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n\n/**\r\n * The {@link eachMonthOfInterval} function options.\r\n */\n\n/**\r\n * @name eachMonthOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of months within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of months within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each month between 6 February 2014 and 10 August 2014:\r\n * const result = eachMonthOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Sat Feb 01 2014 00:00:00,\r\n * //   Sat Mar 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Thu May 01 2014 00:00:00,\r\n * //   Sun Jun 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * //   Fri Aug 01 2014 00:00:00\r\n * // ]\r\n */\nexport function eachMonthOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachMonthOfInterval;","map":{"version":3,"names":["toDate","eachMonthOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","setHours","setDate","step","dates","push","setMonth","getMonth","reverse"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/eachMonthOfInterval.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link eachMonthOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachMonthOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of months within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of months within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval\r\n *\r\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each month between 6 February 2014 and 10 August 2014:\r\n * const result = eachMonthOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Sat Feb 01 2014 00:00:00,\r\n * //   Sat Mar 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Thu May 01 2014 00:00:00,\r\n * //   Sun Jun 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * //   Fri Aug 01 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachMonthOfInterval(interval, options) {\r\n  const startDate = toDate(interval.start);\r\n  const endDate = toDate(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  const currentDate = reversed ? endDate : startDate;\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  currentDate.setDate(1);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate.setMonth(currentDate.getMonth() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachMonthOfInterval;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACrD,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAK,CAAC;EACxC,MAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAG,CAAC;EAEpC,IAAIC,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EAChD,MAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGF,SAAS;EAClDM,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCD,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC;EAEtB,IAAIC,IAAI,GAAGV,OAAO,EAAEU,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZL,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMM,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACJ,WAAW,IAAID,OAAO,EAAE;IAC9BK,KAAK,CAACC,IAAI,CAACf,MAAM,CAACU,WAAW,CAAC,CAAC;IAC/BA,WAAW,CAACM,QAAQ,CAACN,WAAW,CAACO,QAAQ,CAAC,CAAC,GAAGJ,IAAI,CAAC;EACrD;EAEA,OAAOL,QAAQ,GAAGM,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGJ,KAAK;AAC3C;;AAEA;AACA,eAAeb,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}