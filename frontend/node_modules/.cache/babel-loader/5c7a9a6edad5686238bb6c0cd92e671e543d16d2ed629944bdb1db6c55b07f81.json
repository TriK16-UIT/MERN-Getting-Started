{"ast":null,"code":"import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\r\n * The {@link differenceInCalendarWeeks} function options.\r\n */\n\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\nexport function differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = startOfWeek(dateLeft, options);\n  const startOfWeekRight = startOfWeek(dateRight, options);\n  const timestampLeft = +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  const timestampRight = +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarWeeks;","map":{"version":3,"names":["millisecondsInWeek","startOfWeek","getTimezoneOffsetInMilliseconds","differenceInCalendarWeeks","dateLeft","dateRight","options","startOfWeekLeft","startOfWeekRight","timestampLeft","timestampRight","Math","round"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/differenceInCalendarWeeks.mjs"],"sourcesContent":["import { millisecondsInWeek } from \"./constants.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\r\n\r\n/**\r\n * The {@link differenceInCalendarWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\r\nexport function differenceInCalendarWeeks(dateLeft, dateRight, options) {\r\n  const startOfWeekLeft = startOfWeek(dateLeft, options);\r\n  const startOfWeekRight = startOfWeek(dateRight, options);\r\n\r\n  const timestampLeft =\r\n    +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\r\n  const timestampRight =\r\n    +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight);\r\n\r\n  // Round the number of days to the nearest integer because the number of\r\n  // milliseconds in a days is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarWeeks;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,+BAA+B,QAAQ,4CAA4C;;AAE5F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACtE,MAAMC,eAAe,GAAGN,WAAW,CAACG,QAAQ,EAAEE,OAAO,CAAC;EACtD,MAAME,gBAAgB,GAAGP,WAAW,CAACI,SAAS,EAAEC,OAAO,CAAC;EAExD,MAAMG,aAAa,GACjB,CAACF,eAAe,GAAGL,+BAA+B,CAACK,eAAe,CAAC;EACrE,MAAMG,cAAc,GAClB,CAACF,gBAAgB,GAAGN,+BAA+B,CAACM,gBAAgB,CAAC;;EAEvE;EACA;EACA;EACA,OAAOG,IAAI,CAACC,KAAK,CAAC,CAACH,aAAa,GAAGC,cAAc,IAAIV,kBAAkB,CAAC;AAC1E;;AAEA;AACA,eAAeG,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}