{"ast":null,"code":"import { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\n\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\nexport function isSameISOWeekYear(dateLeft, dateRight) {\n  const dateLeftStartOfYear = startOfISOWeekYear(dateLeft);\n  const dateRightStartOfYear = startOfISOWeekYear(dateRight);\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\n}\n\n// Fallback for modularized imports:\nexport default isSameISOWeekYear;","map":{"version":3,"names":["startOfISOWeekYear","isSameISOWeekYear","dateLeft","dateRight","dateLeftStartOfYear","dateRightStartOfYear"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/isSameISOWeekYear.mjs"],"sourcesContent":["import { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\r\n\r\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\r\nexport function isSameISOWeekYear(dateLeft, dateRight) {\r\n  const dateLeftStartOfYear = startOfISOWeekYear(dateLeft);\r\n  const dateRightStartOfYear = startOfISOWeekYear(dateRight);\r\n\r\n  return +dateLeftStartOfYear === +dateRightStartOfYear;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameISOWeekYear;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,0BAA0B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EACrD,MAAMC,mBAAmB,GAAGJ,kBAAkB,CAACE,QAAQ,CAAC;EACxD,MAAMG,oBAAoB,GAAGL,kBAAkB,CAACG,SAAS,CAAC;EAE1D,OAAO,CAACC,mBAAmB,KAAK,CAACC,oBAAoB;AACvD;;AAEA;AACA,eAAeJ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}