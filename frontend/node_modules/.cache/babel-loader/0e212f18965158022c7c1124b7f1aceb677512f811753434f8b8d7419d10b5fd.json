{"ast":null,"code":"import { secondsInDay, secondsInHour, secondsInMinute, secondsInMonth, secondsInQuarter, secondsInWeek, secondsInYear } from \"./constants.mjs\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { differenceInCalendarQuarters } from \"./differenceInCalendarQuarters.mjs\";\nimport { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.mjs\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.mjs\";\nimport { differenceInHours } from \"./differenceInHours.mjs\";\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * The {@link intlFormatDistance} function options.\r\n */\n\n/**\r\n * The unit used to format the distance in {@link intlFormatDistance}.\r\n */\n\n/**\r\n * @name intlFormatDistance\r\n * @category Common Helpers\r\n * @summary Formats distance between two dates in a human-readable format\r\n * @description\r\n * The function calculates the difference between two dates and formats it as a human-readable string.\r\n *\r\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\r\n *\r\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\r\n *\r\n * See the table below for the unit picking logic:\r\n *\r\n * | Distance between dates | Result (past)  | Result (future) |\r\n * | ---------------------- | -------------- | --------------- |\r\n * | 0 seconds              | now            | now             |\r\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\r\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\r\n * | 1-23 hours             | X hours ago    | in X hours      |\r\n * | 1 day                  | yesterday      | tomorrow        |\r\n * | 2-6 days               | X days ago     | in X days       |\r\n * | 7 days                 | last week      | next week       |\r\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\r\n * | 1 month                | last month     | next month      |\r\n * | 2-3 months             | X months ago   | in X months     |\r\n * | 1 quarter              | last quarter   | next quarter    |\r\n * | 2-3 quarters           | X quarters ago | in X quarters   |\r\n * | 1 year                 | last year      | next year       |\r\n * | 2+ years               | X years ago    | in X years      |\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date\r\n * @param baseDate - The date to compare with.\r\n * @param options - An object with options.\r\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\r\n * The narrow one could be similar to the short one for some locales.\r\n *\r\n * @returns The distance in words according to language-sensitive relative time formatting.\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.unit` must not be invalid Unit\r\n * @throws `options.locale` must not be invalid locale\r\n * @throws `options.localeMatcher` must not be invalid localeMatcher\r\n * @throws `options.numeric` must not be invalid numeric\r\n * @throws `options.style` must not be invalid style\r\n *\r\n * @example\r\n * // What is the distance between the dates when the fist date is after the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0)\r\n * )\r\n * //=> 'in 1 hour'\r\n *\r\n * // What is the distance between the dates when the fist date is before the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0)\r\n * )\r\n * //=> '1 hour ago'\r\n *\r\n * @example\r\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\r\n * intlFormatDistance(\r\n *   new Date(1987, 6, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { unit: 'quarter' }\r\n * )\r\n * //=> 'in 5 quarters'\r\n *\r\n * @example\r\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { locale: 'es' }\r\n * )\r\n * //=> 'dentro de 1 hora'\r\n *\r\n * @example\r\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 5, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { numeric: 'always' }\r\n * )\r\n * //=> 'in 1 day'\r\n *\r\n * @example\r\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\r\n * intlFormatDistance(\r\n *   new Date(1988, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { style: 'short' }\r\n * )\r\n * //=> 'in 2 yr'\r\n */\nexport function intlFormatDistance(date, baseDate, options) {\n  let value = 0;\n  let unit;\n  const dateLeft = toDate(date);\n  const dateRight = toDate(baseDate);\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = differenceInSeconds(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < secondsInMinute) {\n      value = differenceInSeconds(dateLeft, dateRight);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < secondsInHour) {\n      value = differenceInMinutes(dateLeft, dateRight);\n      unit = \"minute\";\n    } else if (Math.abs(diffInSeconds) < secondsInDay && Math.abs(differenceInCalendarDays(dateLeft, dateRight)) < 1) {\n      value = differenceInHours(dateLeft, dateRight);\n      unit = \"hour\";\n    } else if (Math.abs(diffInSeconds) < secondsInWeek && (value = differenceInCalendarDays(dateLeft, dateRight)) && Math.abs(value) < 7) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < secondsInMonth) {\n      value = differenceInCalendarWeeks(dateLeft, dateRight);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {\n      value = differenceInCalendarMonths(dateLeft, dateRight);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < secondsInYear) {\n      if (differenceInCalendarQuarters(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = differenceInCalendarQuarters(dateLeft, dateRight);\n        unit = \"quarter\";\n      } else {\n        value = differenceInCalendarYears(dateLeft, dateRight);\n        unit = \"year\";\n      }\n    } else {\n      value = differenceInCalendarYears(dateLeft, dateRight);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = differenceInSeconds(dateLeft, dateRight);\n    } else if (unit === \"minute\") {\n      value = differenceInMinutes(dateLeft, dateRight);\n    } else if (unit === \"hour\") {\n      value = differenceInHours(dateLeft, dateRight);\n    } else if (unit === \"day\") {\n      value = differenceInCalendarDays(dateLeft, dateRight);\n    } else if (unit === \"week\") {\n      value = differenceInCalendarWeeks(dateLeft, dateRight);\n    } else if (unit === \"month\") {\n      value = differenceInCalendarMonths(dateLeft, dateRight);\n    } else if (unit === \"quarter\") {\n      value = differenceInCalendarQuarters(dateLeft, dateRight);\n    } else if (unit === \"year\") {\n      value = differenceInCalendarYears(dateLeft, dateRight);\n    }\n  }\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    localeMatcher: options?.localeMatcher,\n    numeric: options?.numeric || \"auto\",\n    style: options?.style\n  });\n  return rtf.format(value, unit);\n}\n\n// Fallback for modularized imports:\nexport default intlFormatDistance;","map":{"version":3,"names":["secondsInDay","secondsInHour","secondsInMinute","secondsInMonth","secondsInQuarter","secondsInWeek","secondsInYear","differenceInCalendarDays","differenceInCalendarMonths","differenceInCalendarQuarters","differenceInCalendarWeeks","differenceInCalendarYears","differenceInHours","differenceInMinutes","differenceInSeconds","toDate","intlFormatDistance","date","baseDate","options","value","unit","dateLeft","dateRight","diffInSeconds","Math","abs","rtf","Intl","RelativeTimeFormat","locale","localeMatcher","numeric","style","format"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/intlFormatDistance.mjs"],"sourcesContent":["import {\r\n  secondsInDay,\r\n  secondsInHour,\r\n  secondsInMinute,\r\n  secondsInMonth,\r\n  secondsInQuarter,\r\n  secondsInWeek,\r\n  secondsInYear,\r\n} from \"./constants.mjs\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\r\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\r\nimport { differenceInCalendarQuarters } from \"./differenceInCalendarQuarters.mjs\";\r\nimport { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.mjs\";\r\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.mjs\";\r\nimport { differenceInHours } from \"./differenceInHours.mjs\";\r\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\r\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link intlFormatDistance} function options.\r\n */\r\n\r\n/**\r\n * The unit used to format the distance in {@link intlFormatDistance}.\r\n */\r\n\r\n/**\r\n * @name intlFormatDistance\r\n * @category Common Helpers\r\n * @summary Formats distance between two dates in a human-readable format\r\n * @description\r\n * The function calculates the difference between two dates and formats it as a human-readable string.\r\n *\r\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\r\n *\r\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\r\n *\r\n * See the table below for the unit picking logic:\r\n *\r\n * | Distance between dates | Result (past)  | Result (future) |\r\n * | ---------------------- | -------------- | --------------- |\r\n * | 0 seconds              | now            | now             |\r\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\r\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\r\n * | 1-23 hours             | X hours ago    | in X hours      |\r\n * | 1 day                  | yesterday      | tomorrow        |\r\n * | 2-6 days               | X days ago     | in X days       |\r\n * | 7 days                 | last week      | next week       |\r\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\r\n * | 1 month                | last month     | next month      |\r\n * | 2-3 months             | X months ago   | in X months     |\r\n * | 1 quarter              | last quarter   | next quarter    |\r\n * | 2-3 quarters           | X quarters ago | in X quarters   |\r\n * | 1 year                 | last year      | next year       |\r\n * | 2+ years               | X years ago    | in X years      |\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date\r\n * @param baseDate - The date to compare with.\r\n * @param options - An object with options.\r\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\r\n * The narrow one could be similar to the short one for some locales.\r\n *\r\n * @returns The distance in words according to language-sensitive relative time formatting.\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.unit` must not be invalid Unit\r\n * @throws `options.locale` must not be invalid locale\r\n * @throws `options.localeMatcher` must not be invalid localeMatcher\r\n * @throws `options.numeric` must not be invalid numeric\r\n * @throws `options.style` must not be invalid style\r\n *\r\n * @example\r\n * // What is the distance between the dates when the fist date is after the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0)\r\n * )\r\n * //=> 'in 1 hour'\r\n *\r\n * // What is the distance between the dates when the fist date is before the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0)\r\n * )\r\n * //=> '1 hour ago'\r\n *\r\n * @example\r\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\r\n * intlFormatDistance(\r\n *   new Date(1987, 6, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { unit: 'quarter' }\r\n * )\r\n * //=> 'in 5 quarters'\r\n *\r\n * @example\r\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { locale: 'es' }\r\n * )\r\n * //=> 'dentro de 1 hora'\r\n *\r\n * @example\r\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 5, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { numeric: 'always' }\r\n * )\r\n * //=> 'in 1 day'\r\n *\r\n * @example\r\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\r\n * intlFormatDistance(\r\n *   new Date(1988, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { style: 'short' }\r\n * )\r\n * //=> 'in 2 yr'\r\n */\r\nexport function intlFormatDistance(date, baseDate, options) {\r\n  let value = 0;\r\n  let unit;\r\n  const dateLeft = toDate(date);\r\n  const dateRight = toDate(baseDate);\r\n\r\n  if (!options?.unit) {\r\n    // Get the unit based on diffInSeconds calculations if no unit is specified\r\n    const diffInSeconds = differenceInSeconds(dateLeft, dateRight); // The smallest unit\r\n\r\n    if (Math.abs(diffInSeconds) < secondsInMinute) {\r\n      value = differenceInSeconds(dateLeft, dateRight);\r\n      unit = \"second\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInHour) {\r\n      value = differenceInMinutes(dateLeft, dateRight);\r\n      unit = \"minute\";\r\n    } else if (\r\n      Math.abs(diffInSeconds) < secondsInDay &&\r\n      Math.abs(differenceInCalendarDays(dateLeft, dateRight)) < 1\r\n    ) {\r\n      value = differenceInHours(dateLeft, dateRight);\r\n      unit = \"hour\";\r\n    } else if (\r\n      Math.abs(diffInSeconds) < secondsInWeek &&\r\n      (value = differenceInCalendarDays(dateLeft, dateRight)) &&\r\n      Math.abs(value) < 7\r\n    ) {\r\n      unit = \"day\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInMonth) {\r\n      value = differenceInCalendarWeeks(dateLeft, dateRight);\r\n      unit = \"week\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {\r\n      value = differenceInCalendarMonths(dateLeft, dateRight);\r\n      unit = \"month\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInYear) {\r\n      if (differenceInCalendarQuarters(dateLeft, dateRight) < 4) {\r\n        // To filter out cases that are less than a year but match 4 quarters\r\n        value = differenceInCalendarQuarters(dateLeft, dateRight);\r\n        unit = \"quarter\";\r\n      } else {\r\n        value = differenceInCalendarYears(dateLeft, dateRight);\r\n        unit = \"year\";\r\n      }\r\n    } else {\r\n      value = differenceInCalendarYears(dateLeft, dateRight);\r\n      unit = \"year\";\r\n    }\r\n  } else {\r\n    // Get the value if unit is specified\r\n    unit = options?.unit;\r\n    if (unit === \"second\") {\r\n      value = differenceInSeconds(dateLeft, dateRight);\r\n    } else if (unit === \"minute\") {\r\n      value = differenceInMinutes(dateLeft, dateRight);\r\n    } else if (unit === \"hour\") {\r\n      value = differenceInHours(dateLeft, dateRight);\r\n    } else if (unit === \"day\") {\r\n      value = differenceInCalendarDays(dateLeft, dateRight);\r\n    } else if (unit === \"week\") {\r\n      value = differenceInCalendarWeeks(dateLeft, dateRight);\r\n    } else if (unit === \"month\") {\r\n      value = differenceInCalendarMonths(dateLeft, dateRight);\r\n    } else if (unit === \"quarter\") {\r\n      value = differenceInCalendarQuarters(dateLeft, dateRight);\r\n    } else if (unit === \"year\") {\r\n      value = differenceInCalendarYears(dateLeft, dateRight);\r\n    }\r\n  }\r\n\r\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\r\n    localeMatcher: options?.localeMatcher,\r\n    numeric: options?.numeric || \"auto\",\r\n    style: options?.style,\r\n  });\r\n\r\n  return rtf.format(value, unit);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default intlFormatDistance;\r\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,gBAAgB,EAChBC,aAAa,EACbC,aAAa,QACR,iBAAiB;AACxB,SAASC,wBAAwB,QAAQ,gCAAgC;AACzE,SAASC,0BAA0B,QAAQ,kCAAkC;AAC7E,SAASC,4BAA4B,QAAQ,oCAAoC;AACjF,SAASC,yBAAyB,QAAQ,iCAAiC;AAC3E,SAASC,yBAAyB,QAAQ,iCAAiC;AAC3E,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,MAAM,QAAQ,cAAc;;AAErkBAAkBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC1D,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,IAAI;EACR,MAAMC,QAAQ,GAAGP,MAAM,CAACE,IAAI,CAAC;EAC7B,MAAMM,SAAS,GAAGR,MAAM,CAACG,QAAQ,CAAC;EAElC,IAAI,CAACC,OAAO,EAAEE,IAAI,EAAE;IAClB;IACA,MAAMG,aAAa,GAAGV,mBAAmB,CAACQ,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAAC;;IAEhE,IAAIE,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,eAAe,EAAE;MAC7CkB,KAAK,GAAGN,mBAAmB,CAACQ,QAAQ,EAAEC,SAAS,CAAC;MAChDF,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGvB,aAAa,EAAE;MAClDmB,KAAK,GAAGP,mBAAmB,CAACS,QAAQ,EAAEC,SAAS,CAAC;MAChDF,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IACLI,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGxB,YAAY,IACtCyB,IAAI,CAACC,GAAG,CAACnB,wBAAwB,CAACe,QAAQ,EAAEC,SAAS,CAAC,CAAC,GAAG,CAAC,EAC3D;MACAH,KAAK,GAAGR,iBAAiB,CAACU,QAAQ,EAAEC,SAAS,CAAC;MAC9CF,IAAI,GAAG,MAAM;IACf,CAAC,MAAM,IACLI,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGnB,aAAa,KACtCe,KAAK,GAAGb,wBAAwB,CAACe,QAAQ,EAAEC,SAAS,CAAC,CAAC,IACvDE,IAAI,CAACC,GAAG,CAACN,KAAK,CAAC,GAAG,CAAC,EACnB;MACAC,IAAI,GAAG,KAAK;IACd,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGrB,cAAc,EAAE;MACnDiB,KAAK,GAAGV,yBAAyB,CAACY,QAAQ,EAAEC,SAAS,CAAC;MACtDF,IAAI,GAAG,MAAM;IACf,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGpB,gBAAgB,EAAE;MACrDgB,KAAK,GAAGZ,0BAA0B,CAACc,QAAQ,EAAEC,SAAS,CAAC;MACvDF,IAAI,GAAG,OAAO;IAChB,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGlB,aAAa,EAAE;MAClD,IAAIG,4BAA4B,CAACa,QAAQ,EAAEC,SAAS,CAAC,GAAG,CAAC,EAAE;QACzD;QACAH,KAAK,GAAGX,4BAA4B,CAACa,QAAQ,EAAEC,SAAS,CAAC;QACzDF,IAAI,GAAG,SAAS;MAClB,CAAC,MAAM;QACLD,KAAK,GAAGT,yBAAyB,CAACW,QAAQ,EAAEC,SAAS,CAAC;QACtDF,IAAI,GAAG,MAAM;MACf;IACF,CAAC,MAAM;MACLD,KAAK,GAAGT,yBAAyB,CAACW,QAAQ,EAAEC,SAAS,CAAC;MACtDF,IAAI,GAAG,MAAM;IACf;EACF,CAAC,MAAM;IACL;IACAA,IAAI,GAAGF,OAAO,EAAEE,IAAI;IACpB,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrBD,KAAK,GAAGN,mBAAmB,CAACQ,QAAQ,EAAEC,SAAS,CAAC;IAClD,CAAC,MAAM,IAAIF,IAAI,KAAK,QAAQ,EAAE;MAC5BD,KAAK,GAAGP,mBAAmB,CAACS,QAAQ,EAAEC,SAAS,CAAC;IAClD,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BD,KAAK,GAAGR,iBAAiB,CAACU,QAAQ,EAAEC,SAAS,CAAC;IAChD,CAAC,MAAM,IAAIF,IAAI,KAAK,KAAK,EAAE;MACzBD,KAAK,GAAGb,wBAAwB,CAACe,QAAQ,EAAEC,SAAS,CAAC;IACvD,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BD,KAAK,GAAGV,yBAAyB,CAACY,QAAQ,EAAEC,SAAS,CAAC;IACxD,CAAC,MAAM,IAAIF,IAAI,KAAK,OAAO,EAAE;MAC3BD,KAAK,GAAGZ,0BAA0B,CAACc,QAAQ,EAAEC,SAAS,CAAC;IACzD,CAAC,MAAM,IAAIF,IAAI,KAAK,SAAS,EAAE;MAC7BD,KAAK,GAAGX,4BAA4B,CAACa,QAAQ,EAAEC,SAAS,CAAC;IAC3D,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BD,KAAK,GAAGT,yBAAyB,CAACW,QAAQ,EAAEC,SAAS,CAAC;IACxD;EACF;EAEA,MAAMI,GAAG,GAAG,IAAIC,IAAI,CAACC,kBAAkB,CAACV,OAAO,EAAEW,MAAM,EAAE;IACvDC,aAAa,EAAEZ,OAAO,EAAEY,aAAa;IACrCC,OAAO,EAAEb,OAAO,EAAEa,OAAO,IAAI,MAAM;IACnCC,KAAK,EAAEd,OAAO,EAAEc;EAClB,CAAC,CAAC;EAEF,OAAON,GAAG,CAACO,MAAM,CAACd,KAAK,EAAEC,IAAI,CAAC;AAChC;;AAEA;AACA,eAAeL,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}