{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\r\n * The {@link formatISO} function options.\r\n */\n\n/**\r\n * @name formatISO\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string (in loca.l time zone)\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918T190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, date only:\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52Z'\r\n */\nexport function formatISO(date, options) {\n  const _date = toDate(date);\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  let tzOffset = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;","map":{"version":3,"names":["toDate","addLeadingZeros","formatISO","date","options","_date","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","trunc","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/formatISO.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\r\n\r\n/**\r\n * The {@link formatISO} function options.\r\n */\r\n\r\n/**\r\n * @name formatISO\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string (in loca.l time zone)\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918T190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, date only:\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52Z'\r\n */\r\nexport function formatISO(date, options) {\r\n  const _date = toDate(date);\r\n\r\n  if (isNaN(_date.getTime())) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const format = options?.format ?? \"extended\";\r\n  const representation = options?.representation ?? \"complete\";\r\n\r\n  let result = \"\";\r\n  let tzOffset = \"\";\r\n\r\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\r\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\r\n\r\n  // Representation is either 'date' or 'complete'\r\n  if (representation !== \"time\") {\r\n    const day = addLeadingZeros(_date.getDate(), 2);\r\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\r\n    const year = addLeadingZeros(_date.getFullYear(), 4);\r\n\r\n    // yyyyMMdd or yyyy-MM-dd.\r\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\r\n  }\r\n\r\n  // Representation is either 'time' or 'complete'\r\n  if (representation !== \"date\") {\r\n    // Add the timezone.\r\n    const offset = _date.getTimezoneOffset();\r\n\r\n    if (offset !== 0) {\r\n      const absoluteOffset = Math.abs(offset);\r\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\r\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\r\n      // If less than 0, the sign is +, because it is ahead of time.\r\n      const sign = offset < 0 ? \"+\" : \"-\";\r\n\r\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\r\n    } else {\r\n      tzOffset = \"Z\";\r\n    }\r\n\r\n    const hour = addLeadingZeros(_date.getHours(), 2);\r\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\r\n    const second = addLeadingZeros(_date.getSeconds(), 2);\r\n\r\n    // If there's also date, separate it with time with 'T'\r\n    const separator = result === \"\" ? \"\" : \"T\";\r\n\r\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\r\n    const time = [hour, minute, second].join(timeDelimiter);\r\n\r\n    // HHmmss or HH:mm:ss.\r\n    result = `${result}${separator}${time}${tzOffset}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatISO;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}