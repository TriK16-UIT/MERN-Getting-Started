{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week-numbering year\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;","map":{"version":3,"names":["constructFrom","startOfISOWeek","toDate","getISOWeekYear","date","_date","year","getFullYear","fourthOfJanuaryOfNextYear","setFullYear","setHours","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/getISOWeekYear.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week-numbering year\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\r\nexport function getISOWeekYear(date) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\r\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\r\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\r\n\r\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\r\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\r\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getISOWeekYear;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAE;EACnC,MAAMC,KAAK,GAAGH,MAAM,CAACE,IAAI,CAAC;EAC1B,MAAME,IAAI,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;EAEhC,MAAMC,yBAAyB,GAAGR,aAAa,CAACI,IAAI,EAAE,CAAC,CAAC;EACxDI,yBAAyB,CAACC,WAAW,CAACH,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrDE,yBAAyB,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMC,eAAe,GAAGV,cAAc,CAACO,yBAAyB,CAAC;EAEjE,MAAMI,yBAAyB,GAAGZ,aAAa,CAACI,IAAI,EAAE,CAAC,CAAC;EACxDQ,yBAAyB,CAACH,WAAW,CAACH,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;EACjDM,yBAAyB,CAACF,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMG,eAAe,GAAGZ,cAAc,CAACW,yBAAyB,CAAC;EAEjE,IAAIP,KAAK,CAACS,OAAO,CAAC,CAAC,IAAIH,eAAe,CAACG,OAAO,CAAC,CAAC,EAAE;IAChD,OAAOR,IAAI,GAAG,CAAC;EACjB,CAAC,MAAM,IAAID,KAAK,CAACS,OAAO,CAAC,CAAC,IAAID,eAAe,CAACC,OAAO,CAAC,CAAC,EAAE;IACvD,OAAOR,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,GAAG,CAAC;EACjB;AACF;;AAEA;AACA,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}