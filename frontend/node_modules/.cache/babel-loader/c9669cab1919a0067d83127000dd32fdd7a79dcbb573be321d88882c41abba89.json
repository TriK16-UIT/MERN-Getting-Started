{"ast":null,"code":"import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\r\n * The {@link isSameWeek} function options.\r\n */\n\n/**\r\n * @name isSameWeek\r\n * @category Week Helpers\r\n * @summary Are the given dates in the same week (and month and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same week (and month and year)?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same week (and month and year)\r\n *\r\n * @example\r\n * // Are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\r\n * //=> true\r\n *\r\n * @example\r\n * // If week starts with Monday,\r\n * // are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\r\n *   weekStartsOn: 1\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same week?\r\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\nexport function isSameWeek(dateLeft, dateRight, options) {\n  const dateLeftStartOfWeek = startOfWeek(dateLeft, options);\n  const dateRightStartOfWeek = startOfWeek(dateRight, options);\n  return +dateLeftStartOfWeek === +dateRightStartOfWeek;\n}\n\n// Fallback for modularized imports:\nexport default isSameWeek;","map":{"version":3,"names":["startOfWeek","isSameWeek","dateLeft","dateRight","options","dateLeftStartOfWeek","dateRightStartOfWeek"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/isSameWeek.mjs"],"sourcesContent":["import { startOfWeek } from \"./startOfWeek.mjs\";\r\n\r\n/**\r\n * The {@link isSameWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isSameWeek\r\n * @category Week Helpers\r\n * @summary Are the given dates in the same week (and month and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same week (and month and year)?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to check\r\n * @param dateRight - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same week (and month and year)\r\n *\r\n * @example\r\n * // Are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\r\n * //=> true\r\n *\r\n * @example\r\n * // If week starts with Monday,\r\n * // are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\r\n *   weekStartsOn: 1\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same week?\r\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\r\nexport function isSameWeek(dateLeft, dateRight, options) {\r\n  const dateLeftStartOfWeek = startOfWeek(dateLeft, options);\r\n  const dateRightStartOfWeek = startOfWeek(dateRight, options);\r\n\r\n  return +dateLeftStartOfWeek === +dateRightStartOfWeek;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameWeek;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,mBAAmB;;AAE/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACvD,MAAMC,mBAAmB,GAAGL,WAAW,CAACE,QAAQ,EAAEE,OAAO,CAAC;EAC1D,MAAME,oBAAoB,GAAGN,WAAW,CAACG,SAAS,EAAEC,OAAO,CAAC;EAE5D,OAAO,CAACC,mBAAmB,KAAK,CAACC,oBAAoB;AACvD;;AAEA;AACA,eAAeL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}