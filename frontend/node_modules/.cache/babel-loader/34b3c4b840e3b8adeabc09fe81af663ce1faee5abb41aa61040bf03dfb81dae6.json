{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name compareDesc\r\n * @category Common Helpers\r\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return -1 if the first date is after the second,\r\n * 1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to compare\r\n * @param dateRight - The second date to compare\r\n *\r\n * @returns The result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\r\n * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> 1\r\n *\r\n * @example\r\n * // Sort the array of dates in reverse chronological order:\r\n * const result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareDesc)\r\n * //=> [\r\n * //   Sun Jul 02 1995 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Wed Feb 11 1987 00:00:00\r\n * // ]\r\n */\nexport function compareDesc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareDesc;","map":{"version":3,"names":["toDate","compareDesc","dateLeft","dateRight","_dateLeft","_dateRight","diff","getTime"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/compareDesc.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name compareDesc\r\n * @category Common Helpers\r\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return -1 if the first date is after the second,\r\n * 1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The first date to compare\r\n * @param dateRight - The second date to compare\r\n *\r\n * @returns The result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\r\n * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> 1\r\n *\r\n * @example\r\n * // Sort the array of dates in reverse chronological order:\r\n * const result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareDesc)\r\n * //=> [\r\n * //   Sun Jul 02 1995 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Wed Feb 11 1987 00:00:00\r\n * // ]\r\n */\r\nexport function compareDesc(dateLeft, dateRight) {\r\n  const _dateLeft = toDate(dateLeft);\r\n  const _dateRight = toDate(dateRight);\r\n\r\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\r\n\r\n  if (diff > 0) {\r\n    return -1;\r\n  } else if (diff < 0) {\r\n    return 1;\r\n    // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default compareDesc;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAC/C,MAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAAC;EAClC,MAAMG,UAAU,GAAGL,MAAM,CAACG,SAAS,CAAC;EAEpC,MAAMG,IAAI,GAAGF,SAAS,CAACG,OAAO,CAAC,CAAC,GAAGF,UAAU,CAACE,OAAO,CAAC,CAAC;EAEvD,IAAID,IAAI,GAAG,CAAC,EAAE;IACZ,OAAO,CAAC,CAAC;EACX,CAAC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;IACnB,OAAO,CAAC;IACR;EACF,CAAC,MAAM;IACL,OAAOA,IAAI;EACb;AACF;;AAEA;AACA,eAAeL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}