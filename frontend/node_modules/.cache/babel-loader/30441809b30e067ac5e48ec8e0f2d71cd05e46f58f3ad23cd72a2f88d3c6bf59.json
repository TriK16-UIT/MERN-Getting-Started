{"ast":null,"code":"import { max } from \"./max.mjs\";\nimport { min } from \"./min.mjs\";\n\n/**\r\n * @name clamp\r\n * @category Interval Helpers\r\n * @summary Return a date bounded by the start and the end of the given interval\r\n *\r\n * @description\r\n * Clamps a date to the lower bound with the start of the interval and the upper\r\n * bound with the end of the interval.\r\n *\r\n * - When the date is less than the start of the interval, the start is returned.\r\n * - When the date is greater than the end of the interval, the end is returned.\r\n * - Otherwise the date is returned.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be bounded\r\n * @param interval - The interval to bound to\r\n *\r\n * @returns The date bounded by the start and the end of the interval\r\n *\r\n * @example\r\n * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021\r\n * const result = clamp(new Date(2021, 2, 21), {\r\n *   start: new Date(2021, 2, 22),\r\n *   end: new Date(2021, 3, 1),\r\n * })\r\n * //=> Mon Mar 22 2021 00:00:00\r\n */\nexport function clamp(date, interval) {\n  return min([max([date, interval.start]), interval.end]);\n}\n\n// Fallback for modularized imports:\nexport default clamp;","map":{"version":3,"names":["max","min","clamp","date","interval","start","end"],"sources":["C:/Users/Storm/Desktop/SE104/MERN-tutorial/MERN-Getting-Started/frontend/node_modules/date-fns/clamp.mjs"],"sourcesContent":["import { max } from \"./max.mjs\";\r\nimport { min } from \"./min.mjs\";\r\n\r\n/**\r\n * @name clamp\r\n * @category Interval Helpers\r\n * @summary Return a date bounded by the start and the end of the given interval\r\n *\r\n * @description\r\n * Clamps a date to the lower bound with the start of the interval and the upper\r\n * bound with the end of the interval.\r\n *\r\n * - When the date is less than the start of the interval, the start is returned.\r\n * - When the date is greater than the end of the interval, the end is returned.\r\n * - Otherwise the date is returned.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be bounded\r\n * @param interval - The interval to bound to\r\n *\r\n * @returns The date bounded by the start and the end of the interval\r\n *\r\n * @example\r\n * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021\r\n * const result = clamp(new Date(2021, 2, 21), {\r\n *   start: new Date(2021, 2, 22),\r\n *   end: new Date(2021, 3, 1),\r\n * })\r\n * //=> Mon Mar 22 2021 00:00:00\r\n */\r\nexport function clamp(date, interval) {\r\n  return min([max([date, interval.start]), interval.end]);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default clamp;\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,GAAG,QAAQ,WAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACpC,OAAOH,GAAG,CAAC,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAED,QAAQ,CAACE,GAAG,CAAC,CAAC;AACzD;;AAEA;AACA,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}